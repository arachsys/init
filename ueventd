#!/bin/bash

BROADCAST=0
CONFFILE=/etc/ueventd.conf
PIDFILE=/run/ueventd.pid
RESTART=0
SYSFS=${SYSFS:-/sys}
TRIGGER=0

usage() {
  cat >&2 <<EOF
Usage: ${0##*/} [OPTIONS]
Options:
  -b GROUPS     rebroadcast to the specified netlink group mask
  -f CONFFILE   set the configuration file, /etc/ueventd.conf by default
  -p PIDFILE    set the pidfile location, /run/ueventd.pid by default
  -t            retrigger a uevent for each pre-existing device
EOF
  exit 64
}

while getopts :b:f:p:t OPTION; do
  case $OPTION in
    b)
      BROADCAST=$((OPTARG & ~1))
      ;;
    f)
      CONFFILE=$OPTARG
      ;;
    p)
      PIDFILE=$OPTARG
      ;;
    t)
      TRIGGER=1
      ;;
    *)
      usage
      ;;
  esac
done

(( OPTIND <= $# )) && usage

add() { :; }
change() { :; }
event() { :; }
move() { :; }
offline() { :; }
online() { :; }
overflow() { :; }
remove() { :; }

if [[ ! -f $CONFFILE ]]; then
  exit 0
elif ! source "$CONFFILE"; then
  exit 1
fi

if ! { exec 3>>"$PIDFILE" && flock -n 3; } 2>/dev/null; then
  echo "Failed to lock $PIDFILE; is ${0##*/} already running?" >&2
  exit 1
fi

if read -a STAT </proc/self/stat && (( $$ != STAT[5] )); then
  exec daemon -- "$0" "$@"
  rm -f "$PIDFILE"
  exit 1
fi

echo $$ >"$PIDFILE"
trap 'trap "" TERM && kill -TERM 0 && rm -f "$PIDFILE"' EXIT
trap 'exec -- "$0" "$@"' HUP

if [[ ! -p /dev/stdin ]]; then
  exec < <(uevent -l 1 </dev/null 3>&-)
fi

if (( BROADCAST )) && [[ ! -p /dev/stdout ]]; then
  exec > >(uevent -b $BROADCAST >/dev/null 3>&-)
fi

if (( TRIGGER )); then
  find $SYSFS/{module,bus,devices} -name uevent -type f \
    | while read UEVENT; do echo change >"$UEVENT"; done
  for (( INDEX = 1; INDEX <= $#; INDEX++ )); do
    [[ ${!INDEX} == "-t" ]] && set -- "${@:1:INDEX - 1}" "${@:INDEX + 1}"
  done
fi

declare -A ENV=()
while read -r KEY VALUE; do
  if [[ -n $KEY ]]; then
    ENV[$KEY]=$VALUE
    continue
  fi

  unset ACTION DEVNAME DEVPATH DRIVER INTERFACE KEY SUBSYSTEM SYSPATH VALUE
  [[ -v ENV[ACTION] ]] && ACTION=${ENV[ACTION]}
  [[ -v ENV[DEVNAME] ]] && DEVNAME=${ENV[DEVNAME]}
  [[ -v ENV[DEVPATH] ]] && DEVPATH=${ENV[DEVPATH]}
  [[ -v ENV[DRIVER] ]] && DRIVER=${ENV[DRIVER]}
  [[ -v ENV[INTERFACE] ]] && DRIVER=${ENV[INTERFACE]}
  [[ -v ENV[SUBSYSTEM] ]] && SUBSYSTEM=${ENV[SUBSYSTEM]}
  [[ -v ENV[DEVPATH] ]] && SYSPATH=$SYSFS${ENV[DEVPATH]}

  case "$ACTION" in
    add | change | move | offline | online | overflow | remove)
      event "$ACTION" "$DEVPATH" && "$ACTION" "$DEVPATH" || unset ENV
      ;;
    *)
      event "$ACTION" "$DEVPATH" || unset ENV
      ;;
  esac </dev/null >/dev/null 3>&-

  if (( BROADCAST && ${#ENV[@]} )); then
    for KEY in "${!ENV[@]}"; do
      printf '%s %s\n' "$KEY" "${ENV[$KEY]}"
    done
    printf '\n'
  fi

  declare -A ENV=()
done
